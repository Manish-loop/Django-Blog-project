env
db.sqlite3
id_ed25519.pub


@property = Property decorator is 
    def comments(self):
        from comments.models import Comment # Lazy import To avoid circular import
        instance = self
        qs = Comment.objects.filter_by_instance(self)
        return qs.count()
        
The comments method is decorated with @property, which means it can be accessed like an attribute of the Post instance.

# benefits of prooperty are : 
1. Encapsulation
2. Read-only atrributes   
3. Code-simplification
It prevents external code modifiying them directly

In Django, cleaned_data is a dictionary that contains the valid, processed data from a form after it has been validated.
When you submit a form in Django, the form goes through a validation process where it checks the submitted data against 
the form's fields and their associated validation rules (e.g., required fields, max length, proper format).


In utils.py, math.ceil is going to round up and math.floor is going to round down
